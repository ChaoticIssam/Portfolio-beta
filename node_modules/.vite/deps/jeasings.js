import {
  __publicField
} from "./chunk-V6TY7KAL.js";

// node_modules/jeasings/build/JEasings.js
var JEASINGS;
(function(JEASINGS2) {
  const je = {};
  let id = -1;
  let t = 0;
  JEASINGS2.Linear = {
    None: (v) => {
      return v;
    }
  };
  JEASINGS2.Quadratic = {
    In: (v) => {
      return v * v;
    },
    Out: (v) => {
      return -v * (v - 2);
    },
    InOut: (v) => {
      if ((v *= 2) < 1)
        return 0.5 * v * v;
      return -0.5 * (--v * (v - 2) - 1);
    }
  };
  JEASINGS2.Cubic = {
    In: (v) => {
      return v * v * v;
    },
    Out: (v) => {
      return --v * v * v + 1;
    },
    InOut: (v) => {
      if ((v *= 2) < 1)
        return 0.5 * v * v * v;
      return 0.5 * ((v -= 2) * v * v + 2);
    }
  };
  JEASINGS2.Quartic = {
    In: (v) => {
      return v * v * v * v;
    },
    Out: (v) => {
      return -(--v * v * v * v - 1);
    },
    InOut: (v) => {
      if ((v *= 2) < 1)
        return 0.5 * v * v * v * v;
      return -0.5 * ((v -= 2) * v * v * v - 2);
    }
  };
  JEASINGS2.Quintic = {
    In: (v) => {
      return v * v * v * v * v;
    },
    Out: (v) => {
      return (v = v - 1) * v * v * v * v + 1;
    },
    InOut: (v) => {
      if ((v *= 2) < 1)
        return 0.5 * v * v * v * v * v;
      return 0.5 * ((v -= 2) * v * v * v * v + 2);
    }
  };
  JEASINGS2.Sinusoidal = {
    In: (v) => {
      return -Math.cos(v * Math.PI / 2) + 1;
    },
    Out: (v) => {
      return Math.sin(v * Math.PI / 2);
    },
    InOut: (v) => {
      return -0.5 * (Math.cos(Math.PI * v) - 1);
    }
  };
  JEASINGS2.Exponential = {
    In: (v) => {
      return v == 0 ? 0 : Math.pow(2, 10 * (v - 1));
    },
    Out: (v) => {
      return v == 1 ? 1 : -Math.pow(2, -10 * v) + 1;
    },
    InOut: (v) => {
      if (v == 0)
        return 0;
      if (v == 1)
        return 1;
      if ((v *= 2) < 1)
        return 0.5 * Math.pow(2, 10 * (v - 1));
      return 0.5 * (-Math.pow(2, -10 * (v - 1)) + 2);
    }
  };
  JEASINGS2.Circular = {
    In: (v) => {
      return -(Math.sqrt(1 - v * v) - 1);
    },
    Out: (v) => {
      return Math.sqrt(1 - --v * v);
    },
    InOut: (v) => {
      if ((v /= 0.5) < 1)
        return -0.5 * (Math.sqrt(1 - v * v) - 1);
      return 0.5 * (Math.sqrt(1 - (v -= 2) * v) + 1);
    }
  };
  JEASINGS2.Elastic = {
    In: (v) => {
      let s, a = 0.1, p = 0.4;
      if (v == 0)
        return 0;
      if (v == 1)
        return 1;
      if (!p)
        p = 0.3;
      if (!a || a < 1) {
        a = 1;
        s = p / 4;
      } else
        s = p / (2 * Math.PI) * Math.asin(1 / a);
      return -(a * Math.pow(2, 10 * (v -= 1)) * Math.sin((v - s) * (2 * Math.PI) / p));
    },
    Out: (v) => {
      let s, a = 0.1, p = 0.4;
      if (v == 0)
        return 0;
      if (v == 1)
        return 1;
      if (!p)
        p = 0.3;
      if (!a || a < 1) {
        a = 1;
        s = p / 4;
      } else
        s = p / (2 * Math.PI) * Math.asin(1 / a);
      return a * Math.pow(2, -10 * v) * Math.sin((v - s) * (2 * Math.PI) / p) + 1;
    },
    InOut: (v) => {
      let s, a = 0.1, p = 0.4;
      if (v == 0)
        return 0;
      if (v == 1)
        return 1;
      if (!p)
        p = 0.3;
      if (!a || a < 1) {
        a = 1;
        s = p / 4;
      } else
        s = p / (2 * Math.PI) * Math.asin(1 / a);
      if ((v *= 2) < 1)
        return -0.5 * (a * Math.pow(2, 10 * (v -= 1)) * Math.sin((v - s) * (2 * Math.PI) / p));
      return a * Math.pow(2, -10 * (v -= 1)) * Math.sin((v - s) * (2 * Math.PI) / p) * 0.5 + 1;
    }
  };
  JEASINGS2.Back = {
    In: (v) => {
      var s = 1.70158;
      return v * v * ((s + 1) * v - s);
    },
    Out: (v) => {
      var s = 1.70158;
      return (v = v - 1) * v * ((s + 1) * v + s) + 1;
    },
    InOut: (v) => {
      var s = 1.70158 * 1.525;
      if ((v *= 2) < 1)
        return 0.5 * (v * v * ((s + 1) * v - s));
      return 0.5 * ((v -= 2) * v * ((s + 1) * v + s) + 2);
    }
  };
  JEASINGS2.Bounce = {
    In: (v) => {
      return 1 - JEASINGS2.Bounce.Out(1 - v);
    },
    Out: (v) => {
      if ((v /= 1) < 1 / 2.75) {
        return 7.5625 * v * v;
      } else if (v < 2 / 2.75) {
        return 7.5625 * (v -= 1.5 / 2.75) * v + 0.75;
      } else if (v < 2.5 / 2.75) {
        return 7.5625 * (v -= 2.25 / 2.75) * v + 0.9375;
      } else {
        return 7.5625 * (v -= 2.625 / 2.75) * v + 0.984375;
      }
    },
    InOut: (v) => {
      if (v < 0.5)
        return JEASINGS2.Bounce.In(v * 2) * 0.5;
      return JEASINGS2.Bounce.Out(v * 2 - 1) * 0.5 + 0.5;
    }
  };
  class JEasing2 {
    // chained JEasing
    constructor(o) {
      __publicField(this, "o", {});
      // object
      __publicField(this, "id", -1);
      __publicField(this, "d", 1e3);
      // duration
      __publicField(this, "st", 0);
      // start time
      __publicField(this, "ds", 0);
      // delay start
      __publicField(this, "sp", {});
      // starting properties
      __publicField(this, "fp", {});
      // final properties
      __publicField(this, "dp", {});
      // delta properties
      __publicField(this, "ec", JEASINGS2.Linear.None);
      // easing curve
      __publicField(this, "ucb", false);
      // update callback
      __publicField(this, "ccb", false);
      // completed callback
      __publicField(this, "cj", null);
      __publicField(this, "to", (p, d) => {
        if (d !== null) {
          this.d = d;
        }
        for (let property in p) {
          this.fp[property] = p[property];
        }
        return this;
      });
      __publicField(this, "start", () => {
        this.st = (/* @__PURE__ */ new Date()).getTime();
        if (this.ds) {
          this.st += this.ds;
          setTimeout(() => this.postStart(), this.ds);
        } else {
          this.postStart();
        }
        this.id = id++;
        je[this.id] = this;
        return this;
      });
      __publicField(this, "postStart", () => {
        for (let property in this.fp) {
          this.sp[property] = this.o[property];
          this.dp[property] = this.fp[property] - this.o[property];
        }
      });
      __publicField(this, "update", (t2) => {
        let p, e, v;
        if (t2 < this.st) {
          return;
        }
        e = (t2 - this.st) / this.d;
        e > 1 && (e = 1);
        v = this.ec(e);
        for (p in this.dp) {
          this.o[p] = this.sp[p] + this.dp[p] * v;
        }
        this.ucb && this.ucb(this.o, e);
        if (e === 1) {
          delete je[this.id];
          this.ccb && this.ccb(this.o);
          this.cj && this.cj.start();
        }
        return t2;
      });
      __publicField(this, "easing", (f) => {
        this.ec = f;
        return this;
      });
      __publicField(this, "delay", (t2) => {
        this.ds = t2;
        return this;
      });
      __publicField(this, "onUpdate", (f) => {
        this.ucb = f;
        return this;
      });
      __publicField(this, "onComplete", (f) => {
        this.ccb = f;
        return this;
      });
      __publicField(this, "chain", (j) => {
        this.cj = j;
        return this;
      });
      this.o = o;
    }
  }
  JEASINGS2.JEasing = JEasing2;
  JEASINGS2.update = () => {
    t = (/* @__PURE__ */ new Date()).getTime();
    Object.keys(je).forEach((j) => {
      je[j].update(t);
    });
  };
  JEASINGS2.getLength = () => {
    return Object.keys(je).length;
  };
  JEASINGS2.removeAll = () => {
    Object.keys(je).forEach((key) => delete je[key]);
  };
  JEASINGS2.removeJEasing = (j) => {
    Object.keys(je).forEach((key) => {
      if (je[key] === j) {
        delete je[key];
      }
    });
  };
})(JEASINGS || (JEASINGS = {}));
var { JEasing, Linear, Quadratic, Cubic, Quartic, Quintic, Sinusoidal, Exponential, Circular, Elastic, Back, Bounce } = JEASINGS;
var JEasings_default = JEASINGS;
export {
  Back,
  Bounce,
  Circular,
  Cubic,
  Elastic,
  Exponential,
  JEasing,
  Linear,
  Quadratic,
  Quartic,
  Quintic,
  Sinusoidal,
  JEasings_default as default
};
//# sourceMappingURL=jeasings.js.map
